---
layout: post
title: Hosting a fossil repo with lighttpd 
tags: [sysadmin, linux, lighttpd, fossil]
time: 22:30
---

I started working in a project, and it was using fossil as it's scm. I cloned it and began doing my stuff, at first it felt weird, as I am a git user, but eventually I got the knack of it and it feels nice and clean, definitely easier than git. However, because I'm not part of the official project (i.e. I'm working on a *fork*, if you wanna hear git-speak), I didn't have write privileges on the server, so I decided to host my own copy.

I'm running a [personal git server](http://git.lfborjas.com) [with lighttpd](http://jonathanrobson.me/2009/11/how-to-setup-gitweb-with-lighttpd-on-ubuntu), so I decided that I'd use another virtual host under the same domain for the fossil repo. I'm fairly ignorant of lighttpd and web server technologies in general, so I ran into a wall when trying to host the fossil repo [using the cgi script](http://www.fossil-scm.org/index.html/doc/trunk/www/server.wiki). I didn't want to give up and just run `fossil server`, because it would be ugly to write the ip:port combo everytime and because I didn't want to waste my limited memory in a long running daemon. So I set up the virtual host and configured it to relay control to the cgi script, but it only worked for the root url (`"/"`). But it didn't work (I'm guessing now that leaving the field blank would have done the job...)
At the moment, I was, nevertheless, stumped, so I [asked in serverfault](http://serverfault.com/questions/228954/how-to-host-a-fossil-repository-with-lighttpd/251238) and left it there.

After that a whole month went by and I kinda forgot the whole thing, as I paused my work in the project to attend to more urgent matters. A couple of days ago, however, I got an answer to my serverfault question which suggested that I use [`mod_proxy`](http://redmine.lighttpd.net/wiki/1/Docs:ModProxy) with the `fossil server` command. And after reading a little more, both [this article by Zed Shaw](http://sheddingbikes.com/posts/1276624594.html) and the actual [manual](http://www.fossil-scm.org/index.html/doc/trunk/www/server.wiki), it hit me: run it as a xinetd service in some port and use `mod_proxy` to direct requests to the subdomain to it. So here's what I did:

1. Installed xinetd (`sudo apt-get install xinetd`)
2. Created a user for the project (`sudo useradd -m theuser`)
3. Moved the fossil file (the sqlite db) to that user's home folder and set him as owner and group.
4. Added a new xinetd service (under `/etc/xinetd.d`) to listen for http requests in the port 8081.
5. Added a new lighty virtual host that used proxy to redirect all its requests to the port 8081.
6. Restarted xinetd and lighty and voilÃ , things worked.

One caveat with this approach is that, in the lighttpd conf, when setting up the proxy the first time, I wrote the loopback address (127.0.0.1), but that made fossil believe that it was a local request, and it logged me in automatically. Because the site is publicly accessible, that's not good at all. The solution was to write the host's actual public ip address in the proxy config.

The xinetd service, which I put in `/etc/xinetd.d/fossil`, looks something like this (I got the idea from [here](http://www.mail-archive.com/fossil-users@lists.fossil-scm.org/msg01431.html)):

    service fossil
    {
        type = UNLISTED
        port = 8081
        socket_type = stream
        protocol = tcp
        user = root
        wait = no
        cps = 1000
        server = /usr/bin/fossil
        server_args = http /home/theuser/fossils/project.fossil
    }

And the important parts of the lighty conf file (in `/etc/lighttpd/lighttpd.conf`) look like this (and this bit was inspired by [this web2py recipe](http://web2pyslices.com/main/slices/take_slice/96)):

{%highlight lighty%}
server.modules  = (
            "mod_proxy",
            #other irrelevant modules 
)

#more conf...
$HTTP["host"] =~ "^the-subdomain.the-domain.com$" {
  proxy.server = (
    #"" matches ALL paths, like a wildcard
    "" => ((
     "host" => "10.0.0.2", #this is not the actual ip address
     "port" => 8081
    ))
  )
}
{%endhighlight%}








